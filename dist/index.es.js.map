{"version":3,"file":"index.es.js","sources":["../src/types.ts","../src/constants.ts","../src/helpers.ts","../src/utils.ts","../src/StellarConnected.ts","../src/StellarPaymentsUtil.ts","../src/BaseStellarPayments.ts","../src/bip44.ts","../src/AccountStellarPayments.ts","../src/HdStellarPayments.ts","../src/StellarBalanceMonitor.ts","../src/StellarPaymentsFactory.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { extendCodec, Logger, instanceofCodec, nullable, Numeric } from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  CreateTransactionOptions,\n  BaseConfig,\n  Payport,\n  FromTo,\n} from '@faast/payments-common'\nimport * as Stellar from 'stellar-sdk'\n\nexport type StellarCollectionPage<T extends Stellar.Horizon.BaseResponse<never>> = Stellar.ServerApi.CollectionPage<T>\nexport type StellarRawTransaction = Stellar.ServerApi.TransactionRecord\nexport type StellarRawLedger = Stellar.ServerApi.LedgerRecord\n\nexport { StellarRawTransaction as StellarTransaction, StellarRawLedger as StellarLedger, CreateTransactionOptions }\n\nexport type TransactionInfoRaw = StellarRawTransaction & {\n  currentLedger: StellarRawLedger\n}\n\nexport const BaseStellarConfig = extendCodec(\n  BaseConfig,\n  {},\n  {\n    server: t.union([t.string, instanceofCodec(Stellar.Server), t.nullType]),\n  },\n  'BaseStellarConfig',\n)\nexport type BaseStellarConfig = t.TypeOf<typeof BaseStellarConfig>\n\nexport const StellarBalanceMonitorConfig = BaseStellarConfig\nexport type StellarBalanceMonitorConfig = t.TypeOf<typeof StellarBalanceMonitorConfig>\n\nexport const BaseStellarPaymentsConfig = extendCodec(\n  BaseStellarConfig,\n  {},\n  {\n    txTimeoutSeconds: t.number, // number of seconds until a tx expires\n  },\n  'BaseStellarPaymentsConfig',\n)\nexport type BaseStellarPaymentsConfig = t.TypeOf<typeof BaseStellarPaymentsConfig>\n\nexport const HdStellarPaymentsConfig = extendCodec(\n  BaseStellarPaymentsConfig,\n  {\n    seed: t.string,\n  },\n  'HdStellarPaymentsConfig',\n)\nexport type HdStellarPaymentsConfig = t.TypeOf<typeof HdStellarPaymentsConfig>\n\nexport const StellarSignatory = t.type(\n  {\n    address: t.string,\n    secret: t.string,\n  },\n  'StellarSignatory',\n)\nexport type StellarSignatory = t.TypeOf<typeof StellarSignatory>\n\nexport const PartialStellarSignatory = t.partial(StellarSignatory.props, 'PartialStellarSignatory')\nexport type PartialStellarSignatory = t.TypeOf<typeof PartialStellarSignatory>\n\n/**\n * address, or secret+address\n */\nexport const StellarAccountConfig = t.union([\n  t.string, PartialStellarSignatory,\n], 'StellarAccountConfig')\nexport type StellarAccountConfig = t.TypeOf<typeof StellarAccountConfig>\n\nexport const AccountStellarPaymentsConfig = extendCodec(\n  BaseStellarPaymentsConfig,\n  {\n    hotAccount: StellarAccountConfig,\n    depositAccount: StellarAccountConfig,\n  },\n  'AccountStellarPaymentsConfig',\n)\nexport type AccountStellarPaymentsConfig = t.TypeOf<typeof AccountStellarPaymentsConfig>\n\nexport const StellarPaymentsConfig = t.union(\n  [HdStellarPaymentsConfig, AccountStellarPaymentsConfig],\n  'StellarPaymentsConfig',\n)\nexport type StellarPaymentsConfig = t.TypeOf<typeof StellarPaymentsConfig>\n\nexport const StellarUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    amount: t.string,\n    fee: t.string,\n  },\n  'StellarUnsignedTransaction',\n)\nexport type StellarUnsignedTransaction = t.TypeOf<typeof StellarUnsignedTransaction>\n\nexport const StellarSignedTransaction = extendCodec(\n  BaseSignedTransaction,\n  {},\n  'StellarSignedTransaction',\n)\nexport type StellarSignedTransaction = t.TypeOf<typeof StellarSignedTransaction>\n\nexport const StellarTransactionInfo = extendCodec(\n  BaseTransactionInfo,\n  {\n    confirmationNumber: nullable(t.number),\n  },\n  {},\n  'StellarTransactionInfo',\n)\nexport type StellarTransactionInfo = t.TypeOf<typeof StellarTransactionInfo>\n\nexport const StellarBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n    data: t.object,\n  },\n  'StellarBroadcastResult',\n)\nexport type StellarBroadcastResult = t.TypeOf<typeof StellarBroadcastResult>\n\nexport const StellarCreateTransactionOptions = extendCodec(\n  CreateTransactionOptions,\n  {},\n  {\n    timeoutSeconds: t.number,\n  },\n  'StellarCreateTransactionOptions',\n)\nexport type StellarCreateTransactionOptions = t.TypeOf<typeof StellarCreateTransactionOptions>\n\nexport type FromToWithPayport = FromTo & {\n  fromPayport: Payport\n  toPayport: Payport\n}\n","import { NetworkType } from '@faast/payments-common'\nimport { StellarCreateTransactionOptions } from './types'\n\nexport const PACKAGE_NAME = 'stellar-payments'\n\nexport const DECIMAL_PLACES = 7\nexport const BASE_UNITS = 1e7\nexport const MIN_BALANCE = 1\nexport const DEFAULT_CREATE_TRANSACTION_OPTIONS: StellarCreateTransactionOptions = {}\nexport const DEFAULT_TX_TIMEOUT_SECONDS = 5 * 60\n\nexport const NOT_FOUND_ERRORS = ['MissingLedgerHistoryError', 'NotFoundError']\n\nexport const DEFAULT_NETWORK = NetworkType.Mainnet\nexport const DEFAULT_MAINNET_SERVER = 'https://horizon.stellar.org'\nexport const DEFAULT_TESTNET_SERVER = 'https://horizon-testnet.stellar.org'\n","import { createUnitConverters } from '@faast/payments-common'\nimport { isNil } from '@faast/ts-common'\nimport * as Stellar from 'stellar-sdk'\nimport { isString } from 'util'\n\nimport { DECIMAL_PLACES } from './constants'\n\nconst {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n} = createUnitConverters(DECIMAL_PLACES)\n\nexport {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n}\n\nexport function isValidAddress(address: unknown): boolean {\n  return isString(address) && Stellar.StrKey.isValidEd25519PublicKey(address)\n}\n\nexport function isValidExtraId(extraId: unknown): boolean {\n  return isString(extraId)\n}\n\nexport function isValidSecret(secret: unknown): boolean {\n  return isString(secret) && Stellar.StrKey.isValidEd25519SecretSeed(secret)\n}\n\nexport function assertValidAddress(address: string): void {\n  if (!isValidAddress(address)) {\n    throw new Error(`Invalid stellar address: ${address}`)\n  }\n}\n\nexport function assertValidExtraId(extraId: string): void {\n  if (!isValidExtraId(extraId)) {\n    throw new Error(`Invalid stellar extraId: ${extraId}`)\n  }\n}\n\nexport function assertValidExtraIdOrNil(extraId?: string | undefined | null): void {\n  if (!isNil(extraId) && !isValidExtraId(extraId)) {\n    throw new Error(`Invalid stellar extraId: ${extraId}`)\n  }\n}\n","import * as Stellar from 'stellar-sdk'\nimport { NetworkType } from '@faast/payments-common'\nimport promiseRetry from 'promise-retry'\nimport { Logger, isString, isObject } from '@faast/ts-common'\n\nimport { BaseStellarConfig, StellarRawTransaction, StellarLedger, StellarTransaction } from './types';\nimport { DEFAULT_TESTNET_SERVER, DEFAULT_MAINNET_SERVER } from './constants'\n\nexport function isStellarLedger(x: unknown): x is StellarLedger {\n  return isObject(x) && x.hasOwnProperty('successful_transaction_count')\n}\n\nexport function isStellarTransaction(x: unknown): x is StellarTransaction {\n  return isObject(x) && x.hasOwnProperty('source_account')\n}\n\nexport function padLeft(x: string, n: number, v: string): string {\n  while (x.length < n) {\n    x = `${v}${x}`\n  }\n  return x\n}\n\nexport type ResolvedServer = {\n  api: Stellar.Server | null\n  server: string | null\n}\n\nexport function resolveStellarServer(server: BaseStellarConfig['server'], network: NetworkType): ResolvedServer {\n  if (typeof server === 'undefined') {\n    server = network === NetworkType.Testnet ? DEFAULT_TESTNET_SERVER : DEFAULT_MAINNET_SERVER\n  }\n  if (isString(server)) {\n    return {\n      api: new Stellar.Server(server),\n      server,\n    }\n  } else if (server instanceof Stellar.Server) {\n    return {\n      api: server,\n      server: server.serverURL.toString(),\n    }\n  } else {\n    // null server arg -> offline mode\n    return {\n      api: null,\n      server: null,\n    }\n  }\n}\n\nconst CONNECTION_ERRORS = ['ConnectionError', 'NotConnectedError', 'DisconnectedError']\nconst RETRYABLE_ERRORS = [...CONNECTION_ERRORS, 'TimeoutError']\nconst MAX_RETRIES = 3\n\nexport function retryIfDisconnected<T>(fn: () => Promise<T>, stellarApi: Stellar.Server, logger: Logger): Promise<T> {\n  return promiseRetry(\n    (retry, attempt) => {\n      return fn().catch(async e => {\n        const eName = e ? e.constructor.name : ''\n        if (RETRYABLE_ERRORS.includes(eName)) {\n          logger.log(\n            `Retryable error during stellar server call, retrying ${MAX_RETRIES - attempt} more times`,\n            e.toString(),\n          )\n          retry(e)\n        }\n        throw e\n      })\n    },\n    {\n      retries: MAX_RETRIES,\n    },\n  )\n}\n","import { NetworkType } from '@faast/payments-common'\nimport { Logger, assertType, DelegateLogger } from '@faast/ts-common'\nimport * as Stellar from 'stellar-sdk'\n\nimport { BaseStellarConfig, StellarRawLedger, StellarRawTransaction, StellarLedger } from './types'\nimport { DEFAULT_NETWORK, PACKAGE_NAME } from './constants'\nimport { resolveStellarServer, retryIfDisconnected, isStellarLedger } from './utils'\nimport BigNumber from 'bignumber.js';\nimport { toMainDenominationBigNumber } from './helpers';\n\nexport abstract class StellarConnected {\n  networkType: NetworkType\n  logger: Logger\n  api: Stellar.Server | null\n  server: string | null\n\n  constructor(config: BaseStellarConfig = {}) {\n    assertType(BaseStellarConfig, config)\n    this.networkType = config.network || DEFAULT_NETWORK\n    this.logger = new DelegateLogger(config.logger, PACKAGE_NAME)\n    const { api, server } = resolveStellarServer(config.server, this.networkType)\n    this.api = api\n    this.server = server\n  }\n\n  getApi(): Stellar.Server {\n    if (this.api === null) {\n      throw new Error('Cannot access stellar network when configured with null server')\n    }\n    return this.api\n  }\n\n  async init(): Promise<void> {}\n\n  async destroy(): Promise<void> {}\n\n  async _retryDced<T>(fn: () => Promise<T>): Promise<T> {\n    return retryIfDisconnected(fn, this.getApi(), this.logger)\n  }\n\n  async getBlock(id?: string | number): Promise<StellarRawLedger> {\n    let query = this.getApi()\n      .ledgers()\n      .order('desc')\n      .limit(1)\n    if (id) {\n      query = query.ledger(id)\n    }\n    const ledgerCallResult = await this._retryDced(() => query.call())\n    let ledger: StellarLedger\n    if (ledgerCallResult.records) {\n      ledger = ledgerCallResult.records[0]\n    } else if (isStellarLedger(ledgerCallResult)) {\n      ledger = ledgerCallResult\n    } else {\n      this.logger.log(`getBlock(${id ? id : ''}) ledgerCallResult`, ledgerCallResult)\n      throw new Error(`Cannot get stellar ledger ${id ? id : 'head'}`)\n    }\n    return ledger\n  }\n\n  async _normalizeTxOperation(\n    tx: StellarRawTransaction,\n  ): Promise<{ amount: BigNumber, fee: BigNumber, fromAddress: string, toAddress: string }> {\n    const opPage = await this._retryDced(() => tx.operations())\n    const op = opPage.records.find(({ type }) => type === 'create_account' || type === 'payment')\n    if (!op) {\n      throw new Error(`Cannot normalize stellar tx - operation not found for transaction ${tx.id}`)\n    }\n    let fromAddress: string\n    let toAddress: string\n    let amount: string\n    if (op.type === 'create_account') {\n      fromAddress = op.funder\n      toAddress = op.account\n      amount = op.starting_balance\n    } else if (op.type === 'payment') {\n      if (op.asset_type !== 'native') {\n        throw new Error(`Cannot normalize stellar tx - Unsupported stellar payment asset ${op.asset_type}`)\n      }\n      fromAddress = op.from\n      toAddress = op.to\n      amount = op.amount\n    } else {\n      throw new Error(`Cannot normalize stellar tx - Unsupported stellar operation type ${op.type}`)\n    }\n    const fee = toMainDenominationBigNumber(tx.fee_paid)\n    return { amount: new BigNumber(amount), fee, fromAddress, toAddress }\n  }\n}\n","import { PaymentsUtils, Payport } from '@faast/payments-common'\n\nimport {\n  toMainDenominationString,\n  toBaseDenominationString,\n  isValidAddress,\n  isValidExtraId,\n} from './helpers'\nimport { isNil, assertType, Numeric } from '@faast/ts-common'\nimport { StellarConnected } from './StellarConnected';\n\nexport class StellarPaymentsUtils extends StellarConnected implements PaymentsUtils {\n\n  async isValidExtraId(extraId: string): Promise<boolean> {\n    return isValidExtraId(extraId)\n  }\n\n  async isValidAddress(address: string): Promise<boolean> {\n    return isValidAddress(address)\n  }\n\n  private async getPayportValidationMessage(payport: Payport): Promise<string | undefined> {\n    const { address, extraId } = payport\n    if (!(await this.isValidAddress(address))) {\n      return 'Invalid payport address'\n    }\n    if (!isNil(extraId) && !(await this.isValidExtraId(extraId))) {\n      return 'Invalid payport extraId'\n    }\n  }\n\n  async validatePayport(payport: Payport): Promise<void> {\n    assertType(Payport, payport)\n    const message = await this.getPayportValidationMessage(payport)\n    if (message) {\n      throw new Error(message)\n    }\n  }\n\n  async isValidPayport(payport: Payport): Promise<boolean> {\n    if (!Payport.is(payport)) {\n      return false\n    }\n    return !(await this.getPayportValidationMessage(payport))\n  }\n\n  toMainDenomination(amount: Numeric): string {\n    return toMainDenominationString(amount)\n  }\n\n  toBaseDenomination(amount: Numeric): string {\n    return toBaseDenominationString(amount)\n  }\n\n}\n","import {\n  BasePayments,\n  BalanceResult,\n  FeeOption,\n  ResolvedFeeOption,\n  FromTo,\n  Payport,\n  FeeLevel,\n  FeeRateType,\n  TransactionStatus,\n  ResolveablePayport,\n  PaymentsError,\n  PaymentsErrorCode,\n  NetworkType,\n} from '@faast/payments-common'\nimport { assertType, isNil, Numeric, isString } from '@faast/ts-common'\nimport BigNumber from 'bignumber.js'\nimport { omit } from 'lodash'\n\nimport {\n  BaseStellarPaymentsConfig,\n  StellarUnsignedTransaction,\n  StellarSignedTransaction,\n  StellarBroadcastResult,\n  StellarTransactionInfo,\n  StellarCreateTransactionOptions,\n  FromToWithPayport,\n  StellarSignatory,\n} from './types'\nimport { StellarPaymentsUtils } from './StellarPaymentsUtil'\nimport {\n  DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  MIN_BALANCE,\n  NOT_FOUND_ERRORS,\n  BASE_UNITS,\n  DEFAULT_TX_TIMEOUT_SECONDS,\n} from './constants'\nimport { assertValidAddress, assertValidExtraIdOrNil, toBaseDenominationBigNumber } from './helpers'\nimport * as Stellar from 'stellar-sdk'\nimport { isStellarTransaction } from './utils';\n\nfunction extraIdToTag(extraId: string | null | undefined): number | undefined {\n  return isNil(extraId) ? undefined : Number.parseInt(extraId)\n}\nfunction serializePayport(payport: Payport): string {\n  return isNil(payport.extraId) ? payport.address : `${payport.address}/${payport.extraId}`\n}\n\nexport abstract class BaseStellarPayments<Config extends BaseStellarPaymentsConfig> extends StellarPaymentsUtils\n  implements\n    BasePayments<\n      Config,\n      StellarUnsignedTransaction,\n      StellarSignedTransaction,\n      StellarBroadcastResult,\n      StellarTransactionInfo\n    > {\n  constructor(public config: Config) {\n    super(config)\n  }\n\n  getFullConfig() {\n    return this.config\n  }\n\n  getPublicConfig() {\n    return {\n      ...omit(this.config, ['logger', 'server']),\n      ...this.getPublicAccountConfig(),\n    }\n  }\n\n  abstract getPublicAccountConfig(): Config\n\n  abstract getAccountIds(): string[]\n\n  abstract getAccountId(index: number): string\n\n  abstract getHotSignatory(): StellarSignatory\n\n  abstract getDepositSignatory(): StellarSignatory\n\n  abstract isReadOnly(): boolean\n\n  private doGetPayport(index: number): Payport {\n    if (index === 0) {\n      return { address: this.getHotSignatory().address }\n    }\n    if (index === 1) {\n      return { address: this.getDepositSignatory().address }\n    }\n    return { address: this.getDepositSignatory().address, extraId: String(index) }\n  }\n\n  private doResolvePayport(payport: ResolveablePayport): Payport {\n    if (typeof payport === 'number') {\n      return this.doGetPayport(payport)\n    } else if (typeof payport === 'string') {\n      assertValidAddress(payport)\n      return { address: payport }\n    }\n    assertValidAddress(payport.address)\n    assertValidExtraIdOrNil(payport.extraId)\n    return payport\n  }\n\n  async resolvePayport(payport: ResolveablePayport): Promise<Payport> {\n    return this.doResolvePayport(payport)\n  }\n\n  async resolveFromTo(from: number, to: ResolveablePayport): Promise<FromToWithPayport> {\n    const fromPayport = await this.getPayport(from)\n    const toPayport = await this.resolvePayport(to)\n    return {\n      fromAddress: fromPayport.address,\n      fromIndex: from,\n      fromExtraId: fromPayport.extraId,\n      fromPayport,\n      toAddress: toPayport.address,\n      toIndex: typeof to === 'number' ? to : null,\n      toExtraId: toPayport.extraId,\n      toPayport,\n    }\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    return this.doGetPayport(index)\n  }\n\n  requiresBalanceMonitor() {\n    return true\n  }\n\n  getAddressesToMonitor(): string[] {\n    return [this.getHotSignatory().address, this.getDepositSignatory().address]\n  }\n\n  isSweepableAddressBalance(balance: Numeric): boolean {\n    return new BigNumber(balance).gt(0)\n  }\n\n  isSweepableBalance(balance: string, payport?: ResolveablePayport): boolean {\n    const balanceBase = toBaseDenominationBigNumber(balance)\n    if (payport) {\n      payport = this.doResolvePayport(payport)\n      if (isNil(payport.extraId)) {\n        return this.isSweepableAddressBalance(balanceBase)\n      }\n    }\n    return balanceBase.gt(0)\n  }\n\n  async getBalance(payportOrIndex: ResolveablePayport): Promise<BalanceResult> {\n    const payport = await this.resolvePayport(payportOrIndex)\n    const { address, extraId } = payport\n    if (!isNil(extraId)) {\n      throw new Error(`Cannot getBalance of stellar payport with extraId ${extraId}, use BalanceMonitor instead`)\n    }\n    const accountInfo = await this._retryDced(() => this.getApi().loadAccount(address))\n    this.logger.debug(`api.loadAccount ${address}`, accountInfo)\n    const balanceLine = accountInfo.balances.find((line) => line.asset_type === 'native')\n    const amountMain = new BigNumber(balanceLine && balanceLine.balance ? balanceLine.balance : '0')\n    // Subtract locked up min balance from result to avoid confusion about what is actually spendable\n    const confirmedBalance = amountMain.minus(MIN_BALANCE)\n    return {\n      confirmedBalance: confirmedBalance.toString(),\n      unconfirmedBalance: '0',\n      sweepable: this.isSweepableAddressBalance(amountMain),\n    }\n  }\n\n  async getNextSequenceNumber(payportOrIndex: ResolveablePayport): Promise<number> {\n    const payport = await this.resolvePayport(payportOrIndex)\n    const { address } = payport\n    const accountInfo = await this._retryDced(() => this.getApi().loadAccount(address))\n    return Number.parseInt(accountInfo.sequence) + 1\n  }\n\n  resolveIndexFromAddressAndMemo(address: string, memo?: string): number | null {\n    if (address === this.getHotSignatory().address) {\n      return 0\n    } else if (address === this.getDepositSignatory().address) {\n      if (memo) {\n        const index = Number.parseInt(memo)\n        if (!Number.isNaN(index)) {\n          return index\n        }\n      }\n      return 1\n    }\n    return null\n  }\n\n  async getLatestBlock(): Promise<Stellar.ServerApi.LedgerRecord> {\n    const page = await this._retryDced(() => this.getApi().ledgers()\n      .order('desc')\n      .limit(1)\n      .call())\n    if (!page.records) {\n      throw new Error('Failed to get stellar ledger records')\n    }\n    return page.records[0]\n  }\n\n  async getTransactionInfo(txId: string): Promise<StellarTransactionInfo> {\n    let tx: Stellar.ServerApi.TransactionRecord\n    try {\n      const txPage = await this._retryDced(() => this.getApi().transactions().transaction(txId).call())\n      if (txPage.records) {\n        tx = txPage.records[0]\n      } else if (isStellarTransaction(txPage)) {\n        tx = txPage\n      } else {\n        throw new Error(`Transaction not found ${txId}`)\n      }\n    } catch (e) {\n      const eString = e.toString()\n      if (NOT_FOUND_ERRORS.some(type => eString.includes(type))) {\n        throw new Error(`Transaction not found: ${eString}`)\n      }\n      throw e\n    }\n    this.logger.debug('tx', txId, tx)\n    const { amount, fee, fromAddress, toAddress } = await this._normalizeTxOperation(tx)\n    const fromIndex = this.resolveIndexFromAddressAndMemo(fromAddress, tx.memo)\n    const toIndex = this.resolveIndexFromAddressAndMemo(toAddress, tx.memo)\n    const confirmationNumber = tx.ledger_attr\n    const ledger = await this._retryDced(() => tx.ledger())\n    const currentLedger = await this.getLatestBlock()\n    const currentLedgerSequence = currentLedger.sequence\n    const confirmationId = ledger.hash\n    const confirmationTimestamp = ledger.closed_at ? new Date(ledger.closed_at) : null\n    const confirmations = currentLedgerSequence - confirmationNumber\n    const sequenceNumber = Number.parseInt(tx.source_account_sequence)\n    const isExecuted = (tx as any).successful\n    const isConfirmed = Boolean(confirmationNumber)\n    const status = isConfirmed || isExecuted ? TransactionStatus.Confirmed : TransactionStatus.Pending\n    return {\n      status,\n      id: tx.id,\n      fromIndex,\n      fromAddress,\n      fromExtraId: null,\n      toIndex,\n      toAddress,\n      toExtraId: tx.memo || null,\n      amount: amount.toString(),\n      fee: fee.toString(),\n      sequenceNumber,\n      confirmationId,\n      confirmationNumber,\n      confirmationTimestamp,\n      isExecuted,\n      isConfirmed,\n      confirmations,\n      data: tx,\n    }\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption> {\n    let targetFeeLevel\n    let targetFeeRate\n    let targetFeeRateType\n    let feeMain: string\n    let feeBase: string\n    if (feeOption.feeLevel === FeeLevel.Custom) {\n      targetFeeLevel = feeOption.feeLevel\n      targetFeeRate = feeOption.feeRate\n      targetFeeRateType = feeOption.feeRateType\n      if (targetFeeRateType === FeeRateType.Base) {\n        feeBase = targetFeeRate\n        feeMain = this.toMainDenomination(feeBase)\n      } else if (targetFeeRateType === FeeRateType.Main) {\n        feeMain = targetFeeRate\n        feeBase = this.toBaseDenomination(feeMain)\n      } else {\n        throw new Error(`Unsupport stellar feeRateType ${feeOption.feeRateType}`)\n      }\n    } else {\n      targetFeeLevel = feeOption.feeLevel || FeeLevel.Medium\n      const feeStats = await this._retryDced(() => this.getApi().feeStats())\n      feeBase = feeStats.p10_accepted_fee\n      if (targetFeeLevel === FeeLevel.Medium) {\n        feeBase = feeStats.p50_accepted_fee\n      } else if (targetFeeLevel === FeeLevel.High) {\n        feeBase = feeStats.p95_accepted_fee\n      }\n      feeMain = this.toMainDenomination(feeBase)\n      targetFeeRate = feeMain\n      targetFeeRateType = FeeRateType.Main\n    }\n    return {\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      feeMain,\n      feeBase,\n    }\n  }\n\n  private async resolvePayportBalance(\n    fromPayport: Payport,\n    options: StellarCreateTransactionOptions,\n  ): Promise<BigNumber> {\n    if (isNil(fromPayport.extraId)) {\n      const balances = await this.getBalance(fromPayport)\n      return new BigNumber(balances.confirmedBalance)\n    }\n    if (typeof options.payportBalance !== 'string') {\n      throw new Error('stellar-payments createSweepTransaction missing required payportBalance option')\n    }\n    const payportBalance = new BigNumber(options.payportBalance)\n    if (payportBalance.isNaN()) {\n      throw new Error(`Invalid NaN payportBalance option provided: ${options.payportBalance}`)\n    }\n    return payportBalance\n  }\n\n  private getStellarNetwork() {\n    return this.networkType === NetworkType.Testnet\n      ? Stellar.Networks.TESTNET\n      : Stellar.Networks.PUBLIC\n  }\n\n  private serializeTransaction(tx: Stellar.Transaction): { serializedTx: string } {\n    const xdr = tx.toEnvelope().toXDR('base64')\n    return {\n      serializedTx: xdr.toString()\n    }\n  }\n\n  private deserializeTransaction(txData: object): Stellar.Transaction {\n    return new Stellar.Transaction((txData as any).serializedTx, this.getStellarNetwork())\n  }\n\n  private async doCreateTransaction(\n    fromTo: FromTo,\n    feeOption: ResolvedFeeOption,\n    amount: BigNumber,\n    payportBalance: BigNumber,\n    options: StellarCreateTransactionOptions,\n  ): Promise<StellarUnsignedTransaction> {\n    if (amount.isNaN() || amount.lte(0)) {\n      throw new Error(`Invalid amount provided to stellar-payments createTransaction: ${amount}`)\n    }\n    const { fromIndex, fromAddress, fromExtraId, fromPayport, toIndex, toAddress, toExtraId } = fromTo\n    if (fromAddress === toAddress) {\n      throw new Error('Cannot create XLM payment transaction sending XLM to self')\n    }\n    const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = feeOption\n    const { sequenceNumber } = options\n    const txTimeoutSecs = options.timeoutSeconds || this.config.txTimeoutSeconds || DEFAULT_TX_TIMEOUT_SECONDS\n    const amountString = amount.toString()\n    const addressBalances = await this.getBalance({ address: fromAddress })\n    const addressBalance = new BigNumber(addressBalances.confirmedBalance)\n    const actualBalance = addressBalance.plus(MIN_BALANCE)\n    if (addressBalance.lt(0)) {\n      throw new Error(\n        `Cannot send from stellar address that has less than ${MIN_BALANCE} XLM: ${fromAddress} (${actualBalance} XLM)`,\n      )\n    }\n    const totalValue = amount.plus(feeMain)\n    if (addressBalance.minus(totalValue).lt(0)) {\n      throw new Error(\n        `Cannot send ${amountString} XLM with fee of ${feeMain} XLM because it would reduce the balance below ` +\n          `the minimum required balance of ${MIN_BALANCE} XLM: ${fromAddress} (${actualBalance} XLM)`,\n      )\n    }\n    if (typeof fromExtraId === 'string' && totalValue.gt(payportBalance)) {\n      throw new Error(\n        `Insufficient payport balance of ${payportBalance} XLM to send ${amountString} XLM ` +\n          `with fee of ${feeMain} XLM: ${serializePayport(fromPayport)}`,\n      )\n    }\n    const account = sequenceNumber\n      ? new Stellar.Account(fromAddress, sequenceNumber.toString())\n      : await this.getApi().loadAccount(fromAddress)\n\n    const preparedTx = new Stellar.TransactionBuilder(account, {\n        fee: Number.parseInt(feeBase),\n        networkPassphrase: this.getStellarNetwork(),\n        memo: toExtraId ? Stellar.Memo.text(toExtraId) : undefined,\n      })\n      .addOperation(Stellar.Operation.payment({\n        destination: toAddress,\n        asset: Stellar.Asset.native(),\n        amount: amount.toString(),\n      }))\n      .setTimeout(txTimeoutSecs)\n      .build()\n    const txData = this.serializeTransaction(preparedTx)\n    return {\n      status: TransactionStatus.Unsigned,\n      id: null,\n      fromIndex,\n      fromAddress,\n      fromExtraId,\n      toIndex,\n      toAddress,\n      toExtraId,\n      amount: amountString,\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      fee: feeMain,\n      sequenceNumber: Number.parseInt(preparedTx.sequence),\n      data: txData,\n    }\n  }\n\n  async createTransaction(\n    from: number,\n    to: ResolveablePayport,\n    amount: string,\n    options: StellarCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<StellarUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    const amountBn = new BigNumber(amount)\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async createSweepTransaction(\n    from: number,\n    to: ResolveablePayport,\n    options: StellarCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<StellarUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    let amountBn = payportBalance.minus(feeOption.feeMain)\n    if (amountBn.lt(0)) {\n      const fromPayport = { address: fromTo.fromAddress, extraId: fromTo.fromExtraId }\n      throw new Error(\n        `Insufficient balance to sweep from stellar payport with fee of ${feeOption.feeMain} XLM: ` +\n          `${serializePayport(fromPayport)} (${payportBalance} XLM)`,\n      )\n    }\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async signTransaction(unsignedTx: StellarUnsignedTransaction): Promise<StellarSignedTransaction> {\n    assertType(StellarUnsignedTransaction, unsignedTx)\n    if (this.isReadOnly()) {\n      throw new Error('Cannot sign transaction with read only stellar payments (no xprv or secrets provided)')\n    }\n    this.logger.debug('signTransaction', unsignedTx.data)\n    const preparedTx = this.deserializeTransaction(unsignedTx.data)\n    this.logger.debug('preparedTx', JSON.stringify(preparedTx, null, 2))\n    let secret: string | Stellar.Keypair\n    const hotSignatory = this.getHotSignatory()\n    const depositSignatory = this.getDepositSignatory()\n    if (unsignedTx.fromAddress === hotSignatory.address) {\n      secret = hotSignatory.secret\n    } else if (unsignedTx.fromAddress === depositSignatory.address) {\n      secret = depositSignatory.secret\n    } else {\n      throw new Error(`Cannot sign stellar transaction from address ${unsignedTx.fromAddress}`)\n    }\n    const keypair = isString(secret) ? Stellar.Keypair.fromSecret(secret) : secret\n    preparedTx.sign(keypair)\n    const signedData = this.serializeTransaction(preparedTx)\n    return {\n      ...unsignedTx,\n      id: '',\n      data: signedData,\n      status: TransactionStatus.Signed,\n    }\n  }\n\n  async broadcastTransaction(signedTx: StellarSignedTransaction): Promise<StellarBroadcastResult> {\n    assertType(StellarSignedTransaction, signedTx)\n    const preparedTx = this.deserializeTransaction(signedTx.data)\n    let rebroadcast: boolean = false\n    try {\n      const existing = await this.getTransactionInfo(signedTx.id)\n      rebroadcast = existing.id === signedTx.id\n    } catch (e) {}\n    const result = await this._retryDced(() => this.getApi().submitTransaction(preparedTx))\n    this.logger.debug('broadcasted', result)\n    return {\n      id: result.hash,\n      rebroadcast,\n      data: result,\n    }\n  }\n}\n","import { StellarSignatory } from './types'\nimport StellarHDWallet from 'stellar-hd-wallet'\nimport * as bip39 from 'bip39'\n\nexport function deriveSignatory(seed: string, index: number): StellarSignatory {\n  const wallet = seed.includes(' ') ? StellarHDWallet.fromMnemonic(seed) : StellarHDWallet.fromSeed(seed)\n  const keypair = wallet.getKeypair(index)\n  const secret = keypair.secret()\n  const address = keypair.publicKey()\n  return {\n    address,\n    secret,\n  }\n}\n\nexport function generateMnemonic(): string {\n  return StellarHDWallet.generateMnemonic()\n}\n\nexport function mnemonicToSeed(mnemonic: string): string {\n  return bip39.mnemonicToSeedSync(mnemonic).toString('hex')\n}\n","import {\n  AccountStellarPaymentsConfig,\n  StellarSignatory,\n  StellarAccountConfig,\n  PartialStellarSignatory,\n} from './types'\nimport { BaseStellarPayments } from './BaseStellarPayments'\nimport { assertType } from '@faast/ts-common'\nimport { isValidAddress, isValidSecret } from './helpers'\nimport * as Stellar from 'stellar-sdk'\n\nexport class AccountStellarPayments extends BaseStellarPayments<AccountStellarPaymentsConfig> {\n  readOnly: boolean = false\n  readonly hotSignatory: StellarSignatory\n  readonly depositSignatory: StellarSignatory\n\n  constructor(config: AccountStellarPaymentsConfig) {\n    super(config)\n    assertType(AccountStellarPaymentsConfig, config)\n    this.hotSignatory = this.accountConfigToSignatory(config.hotAccount)\n    this.depositSignatory = this.accountConfigToSignatory(config.depositAccount)\n  }\n\n  accountConfigToSignatory(accountConfig: StellarAccountConfig): StellarSignatory {\n    if (PartialStellarSignatory.is(accountConfig)) {\n      if (!accountConfig.secret) {\n        if (!accountConfig.address) {\n          throw new Error('Invalid StellarSecretPair, either secret or address required')\n        }\n        this.readOnly = true\n        return {\n          address: accountConfig.address,\n          secret: '',\n        }\n      }\n      const keyPair = Stellar.Keypair.fromSecret(accountConfig.secret)\n      return {\n        address: keyPair.publicKey(),\n        secret: keyPair.secret(),\n      }\n    } else if (isValidAddress(accountConfig)) {\n      this.readOnly = true\n      return {\n        address: accountConfig,\n        secret: '',\n      }\n    } else if (isValidSecret(accountConfig)) {\n\n    }\n    throw new Error('Invalid stellar account config provided to stellar payments')\n  }\n\n  isReadOnly() {\n    return this.readOnly\n  }\n\n  getPublicAccountConfig(): AccountStellarPaymentsConfig {\n    return {\n      hotAccount: this.hotSignatory.address,\n      depositAccount: this.depositSignatory.address,\n    }\n  }\n\n  getAccountIds(): string[] {\n    return [this.hotSignatory.address, this.depositSignatory.address]\n  }\n\n  getAccountId(index: number): string {\n    if (index < 0) {\n      throw new Error(`Invalid stellar payments accountId index ${index}`)\n    }\n    if (index === 0) {\n      return this.hotSignatory.address\n    }\n    return this.depositSignatory.address\n  }\n\n  getHotSignatory() {\n    return this.hotSignatory\n  }\n\n  getDepositSignatory() {\n    return this.depositSignatory\n  }\n}\n","import { HdStellarPaymentsConfig, StellarSignatory } from './types'\nimport { BaseStellarPayments } from './BaseStellarPayments'\nimport { generateMnemonic, deriveSignatory } from './bip44'\nimport { AccountStellarPayments } from './AccountStellarPayments'\n\nexport class HdStellarPayments extends AccountStellarPayments {\n  readonly seed: string\n  readonly hotSignatory: StellarSignatory\n  readonly depositSignatory: StellarSignatory\n\n  constructor({ seed, ...config }: HdStellarPaymentsConfig) {\n    super({\n      ...config,\n      hotAccount: deriveSignatory(seed, 0),\n      depositAccount: deriveSignatory(seed, 1)\n    })\n  }\n\n  static generateMnemonic = generateMnemonic\n}\n","import {\n  BalanceActivityCallback,\n  GetBalanceActivityOptions,\n  BalanceActivity,\n  BalanceMonitor,\n  RetrieveBalanceActivitiesResult,\n} from '@faast/payments-common'\nimport * as Stellar from 'stellar-sdk'\n\nimport { padLeft } from './utils'\nimport { StellarRawTransaction, StellarCollectionPage } from './types';\nimport { assertValidAddress } from './helpers'\nimport { isUndefined, isNumber } from 'util'\nimport { StellarConnected } from './StellarConnected';\nimport { EventEmitter } from 'events'\n\nexport class StellarBalanceMonitor extends StellarConnected implements BalanceMonitor {\n\n  txEmitter = new EventEmitter()\n\n  _subscribeCancellors: Function[] = []\n\n  async destroy() {\n    this._subscribeCancellors.forEach((cancel) => cancel())\n  }\n\n  async subscribeAddresses(addresses: string[]) {\n    for (let address of addresses) {\n      assertValidAddress(address)\n    }\n    for (let address of addresses) {\n      try {\n        const cancel = this.getApi().transactions().cursor('now').forAccount(address).stream({\n          onmessage: (value) => {\n            this.txEmitter.emit('tx', { address, tx: value })\n          },\n          onerror: (e) => {\n            this.logger.error('Stellar tx stream error', e)\n          },\n        })\n        this.logger.log('Stellar address subscribed', address)\n        this._subscribeCancellors.push(cancel)\n      } catch (e) {\n        this.logger.error('Failed to subscribe to stellar address', address, e.toString())\n        throw e\n      }\n    }\n  }\n\n  onBalanceActivity(callbackFn: BalanceActivityCallback) {\n    this.txEmitter.on('tx', async ({ address, tx }) => {\n      const activity = await this.txToBalanceActivity(address, tx)\n      if (activity) {\n        callbackFn(activity)\n      }\n    })\n  }\n\n  async resolveFromToLedgers(options: GetBalanceActivityOptions): Promise<RetrieveBalanceActivitiesResult> {\n    const { from, to } = options\n    const resolvedFrom = isUndefined(from) ? 0 : isNumber(from) ? from : from.confirmationNumber\n    const resolvedTo = isUndefined(to) ? Number.MAX_SAFE_INTEGER : isNumber(to) ? to : to.confirmationNumber\n    return {\n      from: resolvedFrom,\n      to: resolvedTo,\n    }\n  }\n\n  async retrieveBalanceActivities(\n    address: string,\n    callbackFn: BalanceActivityCallback,\n    options: GetBalanceActivityOptions = {},\n  ): Promise<RetrieveBalanceActivitiesResult> {\n    assertValidAddress(address)\n    const { from, to } = await this.resolveFromToLedgers(options)\n    const limit = 10\n    let lastTx: StellarRawTransaction | undefined\n    let transactionPage: StellarCollectionPage<StellarRawTransaction> | undefined\n    let transactions: StellarRawTransaction[] | undefined\n    while (\n      isUndefined(transactionPage) ||\n      (transactionPage.records.length === limit\n        && lastTx\n        // This condition enables retrieving txs until we reach the desired range. No built in way to filter the query\n        && (lastTx.ledger_attr >= from || lastTx.ledger_attr >= to))\n    ) {\n      transactionPage = await this._retryDced(() => transactionPage\n        ? transactionPage.next()\n        : this.getApi()\n          .transactions()\n          .forAccount(address)\n          .limit(limit)\n          .order('desc') // important txs are retrieved newest to oldest for while loop condition to work\n          .call()\n      )\n      const transactions = transactionPage.records\n      this.logger.debug(`retrieved stellar txs for ${address}`, transactions)\n      for (let tx of transactions) {\n        if ((lastTx && tx.id === lastTx.id) || !(tx.ledger_attr >= from && tx.ledger_attr <= to)) {\n          continue\n        }\n        const activity = await this.txToBalanceActivity(address, tx)\n        if (activity) {\n          await callbackFn(activity)\n        }\n      }\n      lastTx = transactions[transactions.length - 1]\n    }\n    return { from, to }\n  }\n\n  private async txToBalanceActivity(address: string, tx: StellarRawTransaction): Promise<BalanceActivity | null> {\n    const successful = (tx as any).successful\n    if (!successful) {\n      this.logger.log(`No balance activity for stellar tx ${tx.id} because successful is ${successful}`)\n      return null\n    }\n    const confirmationNumber = tx.ledger_attr\n    const primarySequence = padLeft(String(tx.ledger_attr), 12, '0')\n    const secondarySequence = padLeft(String(new Date(tx.created_at).getTime()), 18, '0')\n    const ledger = await this.getBlock(confirmationNumber)\n    let operation\n    try {\n      operation = await this._normalizeTxOperation(tx)\n    } catch (e) {\n      if (e.message.includes('Cannot normalize stellar tx')) {\n        return null\n      }\n      throw e\n    }\n    const { amount, fee, fromAddress, toAddress } = operation\n    if (!(fromAddress === address || toAddress === address)) {\n      this.logger.log(`Stellar transaction ${tx.id} operation does not apply to ${address}`)\n      return null\n    }\n    const type = toAddress === address ? 'in' : 'out'\n    const extraId = toAddress === address ? tx.memo : null\n    const tertiarySequence = type === 'out' ? '00' : '01'\n    const activitySequence = `${primarySequence}.${secondarySequence}.${tertiarySequence}`\n\n    const netAmount = type === 'out' ? amount.plus(fee).times(-1) : amount\n\n    return {\n      type,\n      networkType: this.networkType,\n      networkSymbol: 'XLM',\n      assetSymbol: 'XLM',\n      address: address,\n      extraId: !isUndefined(extraId) ? extraId : null,\n\n      amount: netAmount.toString(),\n\n      externalId: tx.id,\n      activitySequence,\n      confirmationId: ledger.hash,\n      confirmationNumber,\n      timestamp: new Date(ledger.closed_at),\n    }\n  }\n}\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { StellarPaymentsConfig, HdStellarPaymentsConfig, AccountStellarPaymentsConfig } from './types'\nimport { HdStellarPayments } from './HdStellarPayments'\nimport { AccountStellarPayments } from './AccountStellarPayments'\nimport { assertType } from '@faast/ts-common'\n\nexport class StellarPaymentsFactory implements PaymentsFactory<StellarPaymentsConfig> {\n  forConfig(config: HdStellarPaymentsConfig): HdStellarPayments\n  forConfig(config: AccountStellarPaymentsConfig): AccountStellarPayments\n  forConfig(config: StellarPaymentsConfig) {\n    if (AccountStellarPaymentsConfig.is(config)) {\n      return new AccountStellarPayments(config)\n    }\n    return new HdStellarPayments(assertType(HdStellarPaymentsConfig, config))\n  }\n}\n\nexport default StellarPaymentsFactory\n"],"names":["t.union","t.string","Stellar.Server","t.nullType","t.number","t.type","t.partial","t.boolean","t.object","Stellar.StrKey","isString","type","Stellar.Networks","Stellar.Transaction","Stellar.Account","Stellar.TransactionBuilder","Stellar.Memo","Stellar.Operation","Stellar.Asset","Stellar.Keypair"],"mappings":"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"}