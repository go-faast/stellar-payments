{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/constants.ts","../src/helpers.ts","../src/utils.ts","../src/StellarConnected.ts","../src/StellarPaymentsUtil.ts","../src/BaseStellarPayments.ts","../src/bip44.ts","../src/AccountStellarPayments.ts","../src/HdStellarPayments.ts","../src/StellarBalanceMonitor.ts","../src/StellarPaymentsFactory.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { extendCodec, Logger, instanceofCodec, nullable, Numeric } from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  CreateTransactionOptions,\n  BaseConfig,\n  Payport,\n  FromTo,\n} from '@faast/payments-common'\nimport * as Stellar from 'stellar-sdk'\n\nexport type StellarCollectionPage<T extends Stellar.Horizon.BaseResponse<never>> = Stellar.ServerApi.CollectionPage<T>\nexport type StellarRawTransaction = Stellar.ServerApi.TransactionRecord\nexport type StellarRawLedger = Stellar.ServerApi.LedgerRecord\n\nexport { StellarRawTransaction as StellarTransaction, StellarRawLedger as StellarLedger, CreateTransactionOptions }\n\nexport type TransactionInfoRaw = StellarRawTransaction & {\n  currentLedger: StellarRawLedger\n}\n\nexport const BaseStellarConfig = extendCodec(\n  BaseConfig,\n  {},\n  {\n    server: t.union([t.string, instanceofCodec(Stellar.Server), t.nullType]),\n  },\n  'BaseStellarConfig',\n)\nexport type BaseStellarConfig = t.TypeOf<typeof BaseStellarConfig>\n\nexport const StellarBalanceMonitorConfig = BaseStellarConfig\nexport type StellarBalanceMonitorConfig = t.TypeOf<typeof StellarBalanceMonitorConfig>\n\nexport const BaseStellarPaymentsConfig = extendCodec(\n  BaseStellarConfig,\n  {},\n  {\n    txTimeoutSeconds: t.number, // number of seconds until a tx expires\n  },\n  'BaseStellarPaymentsConfig',\n)\nexport type BaseStellarPaymentsConfig = t.TypeOf<typeof BaseStellarPaymentsConfig>\n\nexport const HdStellarPaymentsConfig = extendCodec(\n  BaseStellarPaymentsConfig,\n  {\n    seed: t.string,\n  },\n  'HdStellarPaymentsConfig',\n)\nexport type HdStellarPaymentsConfig = t.TypeOf<typeof HdStellarPaymentsConfig>\n\nexport const StellarSignatory = t.type(\n  {\n    address: t.string,\n    secret: t.string,\n  },\n  'StellarSignatory',\n)\nexport type StellarSignatory = t.TypeOf<typeof StellarSignatory>\n\nexport const PartialStellarSignatory = t.partial(StellarSignatory.props, 'PartialStellarSignatory')\nexport type PartialStellarSignatory = t.TypeOf<typeof PartialStellarSignatory>\n\n/**\n * address, or secret+address\n */\nexport const StellarAccountConfig = t.union([\n  t.string, PartialStellarSignatory,\n], 'StellarAccountConfig')\nexport type StellarAccountConfig = t.TypeOf<typeof StellarAccountConfig>\n\nexport const AccountStellarPaymentsConfig = extendCodec(\n  BaseStellarPaymentsConfig,\n  {\n    hotAccount: StellarAccountConfig,\n    depositAccount: StellarAccountConfig,\n  },\n  'AccountStellarPaymentsConfig',\n)\nexport type AccountStellarPaymentsConfig = t.TypeOf<typeof AccountStellarPaymentsConfig>\n\nexport const StellarPaymentsConfig = t.union(\n  [HdStellarPaymentsConfig, AccountStellarPaymentsConfig],\n  'StellarPaymentsConfig',\n)\nexport type StellarPaymentsConfig = t.TypeOf<typeof StellarPaymentsConfig>\n\nexport const StellarUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    amount: t.string,\n    fee: t.string,\n  },\n  'StellarUnsignedTransaction',\n)\nexport type StellarUnsignedTransaction = t.TypeOf<typeof StellarUnsignedTransaction>\n\nexport const StellarSignedTransaction = extendCodec(\n  BaseSignedTransaction,\n  {},\n  'StellarSignedTransaction',\n)\nexport type StellarSignedTransaction = t.TypeOf<typeof StellarSignedTransaction>\n\nexport const StellarTransactionInfo = extendCodec(\n  BaseTransactionInfo,\n  {\n    confirmationNumber: nullable(t.string),\n  },\n  {},\n  'StellarTransactionInfo',\n)\nexport type StellarTransactionInfo = t.TypeOf<typeof StellarTransactionInfo>\n\nexport const StellarBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n    data: t.object,\n  },\n  'StellarBroadcastResult',\n)\nexport type StellarBroadcastResult = t.TypeOf<typeof StellarBroadcastResult>\n\nexport const StellarCreateTransactionOptions = extendCodec(\n  CreateTransactionOptions,\n  {},\n  {\n    timeoutSeconds: t.number,\n  },\n  'StellarCreateTransactionOptions',\n)\nexport type StellarCreateTransactionOptions = t.TypeOf<typeof StellarCreateTransactionOptions>\n\nexport type FromToWithPayport = FromTo & {\n  fromPayport: Payport\n  toPayport: Payport\n}\n","import { NetworkType } from '@faast/payments-common'\nimport { StellarCreateTransactionOptions } from './types'\n\nexport const PACKAGE_NAME = 'stellar-payments'\n\nexport const DECIMAL_PLACES = 7\nexport const BASE_UNITS = 1e7\nexport const MIN_BALANCE = 1\nexport const DEFAULT_CREATE_TRANSACTION_OPTIONS: StellarCreateTransactionOptions = {}\nexport const DEFAULT_TX_TIMEOUT_SECONDS = 5 * 60\n\nexport const NOT_FOUND_ERRORS = ['MissingLedgerHistoryError', 'NotFoundError']\n\nexport const DEFAULT_NETWORK = NetworkType.Mainnet\nexport const DEFAULT_MAINNET_SERVER = 'https://horizon.stellar.org'\nexport const DEFAULT_TESTNET_SERVER = 'https://horizon-testnet.stellar.org'\n","import { createUnitConverters } from '@faast/payments-common'\nimport { isNil } from '@faast/ts-common'\nimport * as Stellar from 'stellar-sdk'\nimport { isString } from 'util'\n\nimport { DECIMAL_PLACES } from './constants'\n\nconst {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n} = createUnitConverters(DECIMAL_PLACES)\n\nexport {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n}\n\nexport function isValidAddress(address: unknown): boolean {\n  return isString(address) && Stellar.StrKey.isValidEd25519PublicKey(address)\n}\n\nexport function isValidExtraId(extraId: unknown): boolean {\n  return isString(extraId)\n}\n\nexport function isValidSecret(secret: unknown): boolean {\n  return isString(secret) && Stellar.StrKey.isValidEd25519SecretSeed(secret)\n}\n\nexport function assertValidAddress(address: string): void {\n  if (!isValidAddress(address)) {\n    throw new Error(`Invalid stellar address: ${address}`)\n  }\n}\n\nexport function assertValidExtraId(extraId: string): void {\n  if (!isValidExtraId(extraId)) {\n    throw new Error(`Invalid stellar extraId: ${extraId}`)\n  }\n}\n\nexport function assertValidExtraIdOrNil(extraId?: string | undefined | null): void {\n  if (!isNil(extraId) && !isValidExtraId(extraId)) {\n    throw new Error(`Invalid stellar extraId: ${extraId}`)\n  }\n}\n","import * as Stellar from 'stellar-sdk'\nimport { NetworkType, Payport } from '@faast/payments-common'\nimport promiseRetry from 'promise-retry'\nimport { Logger, isString, isObject, isNil } from '@faast/ts-common'\n\nimport { BaseStellarConfig, StellarRawTransaction, StellarLedger, StellarTransaction } from './types'\nimport { DEFAULT_TESTNET_SERVER, DEFAULT_MAINNET_SERVER } from './constants'\nimport { omitBy } from 'lodash';\n\nexport function serializePayport(payport: Payport): string {\n  return isNil(payport.extraId) ? payport.address : `${payport.address}/${payport.extraId}`\n}\n\nexport function omitHidden(o: object): object {\n  return omitBy(o, (_, k) => k.startsWith('_'))\n}\n\nexport function isStellarLedger(x: unknown): x is StellarLedger {\n  return isObject(x) && x.hasOwnProperty('successful_transaction_count')\n}\n\nexport function isStellarTransaction(x: unknown): x is StellarTransaction {\n  return isObject(x) && x.hasOwnProperty('source_account')\n}\n\nexport function padLeft(x: string, n: number, v: string): string {\n  while (x.length < n) {\n    x = `${v}${x}`\n  }\n  return x\n}\n\nexport type ResolvedServer = {\n  api: Stellar.Server | null\n  server: string | null\n}\n\nexport function resolveStellarServer(server: BaseStellarConfig['server'], network: NetworkType): ResolvedServer {\n  if (typeof server === 'undefined') {\n    server = network === NetworkType.Testnet ? DEFAULT_TESTNET_SERVER : DEFAULT_MAINNET_SERVER\n  }\n  if (isString(server)) {\n    return {\n      api: new Stellar.Server(server),\n      server,\n    }\n  } else if (server instanceof Stellar.Server) {\n    return {\n      api: server,\n      server: server.serverURL.toString(),\n    }\n  } else {\n    // null server arg -> offline mode\n    return {\n      api: null,\n      server: null,\n    }\n  }\n}\n\nconst CONNECTION_ERRORS = ['ConnectionError', 'NotConnectedError', 'DisconnectedError']\nconst RETRYABLE_ERRORS = [...CONNECTION_ERRORS, 'TimeoutError']\nconst MAX_RETRIES = 3\n\nexport function retryIfDisconnected<T>(fn: () => Promise<T>, stellarApi: Stellar.Server, logger: Logger): Promise<T> {\n  return promiseRetry(\n    (retry, attempt) => {\n      return fn().catch(async e => {\n        const eName = e ? e.constructor.name : ''\n        if (RETRYABLE_ERRORS.includes(eName)) {\n          logger.log(\n            `Retryable error during stellar server call, retrying ${MAX_RETRIES - attempt} more times`,\n            e.toString(),\n          )\n          retry(e)\n        }\n        throw e\n      })\n    },\n    {\n      retries: MAX_RETRIES,\n    },\n  )\n}\n","import { NetworkType } from '@faast/payments-common'\nimport { Logger, assertType, DelegateLogger } from '@faast/ts-common'\nimport * as Stellar from 'stellar-sdk'\n\nimport { BaseStellarConfig, StellarRawLedger, StellarRawTransaction, StellarLedger } from './types'\nimport { DEFAULT_NETWORK, PACKAGE_NAME } from './constants'\nimport { resolveStellarServer, retryIfDisconnected, isStellarLedger } from './utils'\nimport BigNumber from 'bignumber.js';\nimport { toMainDenominationBigNumber } from './helpers';\n\nexport abstract class StellarConnected {\n  networkType: NetworkType\n  logger: Logger\n  api: Stellar.Server | null\n  server: string | null\n\n  constructor(config: BaseStellarConfig = {}) {\n    assertType(BaseStellarConfig, config)\n    this.networkType = config.network || DEFAULT_NETWORK\n    this.logger = new DelegateLogger(config.logger, PACKAGE_NAME)\n    const { api, server } = resolveStellarServer(config.server, this.networkType)\n    this.api = api\n    this.server = server\n  }\n\n  getApi(): Stellar.Server {\n    if (this.api === null) {\n      throw new Error('Cannot access stellar network when configured with null server')\n    }\n    return this.api\n  }\n\n  async init(): Promise<void> {}\n\n  async destroy(): Promise<void> {}\n\n  async _retryDced<T>(fn: () => Promise<T>): Promise<T> {\n    return retryIfDisconnected(fn, this.getApi(), this.logger)\n  }\n\n  async getBlock(id?: string | number): Promise<StellarRawLedger> {\n    let query = this.getApi()\n      .ledgers()\n      .order('desc')\n      .limit(1)\n    if (id) {\n      query = query.ledger(id)\n    }\n    const ledgerCallResult = await this._retryDced(() => query.call())\n    let ledger: StellarLedger\n    if (ledgerCallResult.records) {\n      ledger = ledgerCallResult.records[0]\n    } else if (isStellarLedger(ledgerCallResult)) {\n      ledger = ledgerCallResult\n    } else {\n      this.logger.log(`getBlock(${id ? id : ''}) ledgerCallResult`, ledgerCallResult)\n      throw new Error(`Cannot get stellar ledger ${id ? id : 'head'}`)\n    }\n    return ledger\n  }\n\n  async _normalizeTxOperation(\n    tx: StellarRawTransaction,\n  ): Promise<{ amount: BigNumber, fee: BigNumber, fromAddress: string, toAddress: string }> {\n    const opPage = await this._retryDced(() => tx.operations())\n    const op = opPage.records.find(({ type }) => type === 'create_account' || type === 'payment')\n    if (!op) {\n      throw new Error(`Cannot normalize stellar tx - operation not found for transaction ${tx.id}`)\n    }\n    let fromAddress: string\n    let toAddress: string\n    let amount: string\n    if (op.type === 'create_account') {\n      fromAddress = op.funder\n      toAddress = op.account\n      amount = op.starting_balance\n    } else if (op.type === 'payment') {\n      if (op.asset_type !== 'native') {\n        throw new Error(`Cannot normalize stellar tx - Unsupported stellar payment asset ${op.asset_type}`)\n      }\n      fromAddress = op.from\n      toAddress = op.to\n      amount = op.amount\n    } else {\n      throw new Error(`Cannot normalize stellar tx - Unsupported stellar operation type ${op.type}`)\n    }\n    const fee = toMainDenominationBigNumber(tx.fee_paid)\n    return { amount: new BigNumber(amount), fee, fromAddress, toAddress }\n  }\n}\n","import { PaymentsUtils, Payport } from '@faast/payments-common'\n\nimport {\n  toMainDenominationString,\n  toBaseDenominationString,\n  isValidAddress,\n  isValidExtraId,\n} from './helpers'\nimport { isNil, assertType, Numeric } from '@faast/ts-common'\nimport { StellarConnected } from './StellarConnected';\n\nexport class StellarPaymentsUtils extends StellarConnected implements PaymentsUtils {\n\n  async isValidExtraId(extraId: string): Promise<boolean> {\n    return isValidExtraId(extraId)\n  }\n\n  async isValidAddress(address: string): Promise<boolean> {\n    return isValidAddress(address)\n  }\n\n  private async getPayportValidationMessage(payport: Payport): Promise<string | undefined> {\n    const { address, extraId } = payport\n    if (!(await this.isValidAddress(address))) {\n      return 'Invalid payport address'\n    }\n    if (!isNil(extraId) && !(await this.isValidExtraId(extraId))) {\n      return 'Invalid payport extraId'\n    }\n  }\n\n  async validatePayport(payport: Payport): Promise<void> {\n    assertType(Payport, payport)\n    const message = await this.getPayportValidationMessage(payport)\n    if (message) {\n      throw new Error(message)\n    }\n  }\n\n  async isValidPayport(payport: Payport): Promise<boolean> {\n    if (!Payport.is(payport)) {\n      return false\n    }\n    return !(await this.getPayportValidationMessage(payport))\n  }\n\n  toMainDenomination(amount: Numeric): string {\n    return toMainDenominationString(amount)\n  }\n\n  toBaseDenomination(amount: Numeric): string {\n    return toBaseDenominationString(amount)\n  }\n\n}\n","import {\n  BasePayments,\n  BalanceResult,\n  FeeOption,\n  ResolvedFeeOption,\n  FromTo,\n  Payport,\n  FeeLevel,\n  FeeRateType,\n  TransactionStatus,\n  ResolveablePayport,\n  PaymentsError,\n  PaymentsErrorCode,\n  NetworkType,\n} from '@faast/payments-common'\nimport { assertType, isNil, Numeric, isString, toBigNumber } from '@faast/ts-common'\nimport BigNumber from 'bignumber.js'\nimport { omit, omitBy } from 'lodash'\nimport * as Stellar from 'stellar-sdk'\n\nimport {\n  BaseStellarPaymentsConfig,\n  StellarUnsignedTransaction,\n  StellarSignedTransaction,\n  StellarBroadcastResult,\n  StellarTransactionInfo,\n  StellarCreateTransactionOptions,\n  FromToWithPayport,\n  StellarSignatory,\n} from './types'\nimport { StellarPaymentsUtils } from './StellarPaymentsUtil'\nimport {\n  DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  MIN_BALANCE,\n  NOT_FOUND_ERRORS,\n  BASE_UNITS,\n  DEFAULT_TX_TIMEOUT_SECONDS,\n} from './constants'\nimport { assertValidAddress, assertValidExtraIdOrNil, toBaseDenominationBigNumber } from './helpers'\nimport { isStellarTransaction, serializePayport, omitHidden } from './utils'\n\nexport abstract class BaseStellarPayments<Config extends BaseStellarPaymentsConfig> extends StellarPaymentsUtils\n  implements\n    BasePayments<\n      Config,\n      StellarUnsignedTransaction,\n      StellarSignedTransaction,\n      StellarBroadcastResult,\n      StellarTransactionInfo\n    > {\n  constructor(public config: Config) {\n    super(config)\n  }\n\n  getFullConfig() {\n    return this.config\n  }\n\n  getPublicConfig() {\n    return {\n      ...omit(this.config, ['logger', 'server']),\n      ...this.getPublicAccountConfig(),\n    }\n  }\n\n  abstract getPublicAccountConfig(): Config\n\n  abstract getAccountIds(): string[]\n\n  abstract getAccountId(index: number): string\n\n  abstract getHotSignatory(): StellarSignatory\n\n  abstract getDepositSignatory(): StellarSignatory\n\n  abstract isReadOnly(): boolean\n\n  private doGetPayport(index: number): Payport {\n    if (index === 0) {\n      return { address: this.getHotSignatory().address }\n    }\n    if (index === 1) {\n      return { address: this.getDepositSignatory().address }\n    }\n    return { address: this.getDepositSignatory().address, extraId: String(index) }\n  }\n\n  private doResolvePayport(payport: ResolveablePayport): Payport {\n    if (typeof payport === 'number') {\n      return this.doGetPayport(payport)\n    } else if (typeof payport === 'string') {\n      assertValidAddress(payport)\n      return { address: payport }\n    }\n    assertValidAddress(payport.address)\n    assertValidExtraIdOrNil(payport.extraId)\n    return payport\n  }\n\n  async resolvePayport(payport: ResolveablePayport): Promise<Payport> {\n    return this.doResolvePayport(payport)\n  }\n\n  async resolveFromTo(from: number, to: ResolveablePayport): Promise<FromToWithPayport> {\n    const fromPayport = await this.getPayport(from)\n    const toPayport = await this.resolvePayport(to)\n    return {\n      fromAddress: fromPayport.address,\n      fromIndex: from,\n      fromExtraId: fromPayport.extraId,\n      fromPayport,\n      toAddress: toPayport.address,\n      toIndex: typeof to === 'number' ? to : null,\n      toExtraId: toPayport.extraId,\n      toPayport,\n    }\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    return this.doGetPayport(index)\n  }\n\n  requiresBalanceMonitor() {\n    return true\n  }\n\n  getAddressesToMonitor(): string[] {\n    return [this.getHotSignatory().address, this.getDepositSignatory().address]\n  }\n\n  isSweepableAddressBalance(balance: Numeric): boolean {\n    return new BigNumber(balance).gt(0)\n  }\n\n  isSweepableBalance(balance: string, payport?: ResolveablePayport): boolean {\n    const balanceBase = toBaseDenominationBigNumber(balance)\n    if (payport) {\n      payport = this.doResolvePayport(payport)\n      if (isNil(payport.extraId)) {\n        return this.isSweepableAddressBalance(balanceBase)\n      }\n    }\n    return balanceBase.gt(0)\n  }\n\n  async getBalance(payportOrIndex: ResolveablePayport): Promise<BalanceResult> {\n    const payport = await this.resolvePayport(payportOrIndex)\n    const { address, extraId } = payport\n    if (!isNil(extraId)) {\n      throw new Error(`Cannot getBalance of stellar payport with extraId ${extraId}, use BalanceMonitor instead`)\n    }\n    const accountInfo = await this._retryDced(() => this.getApi().loadAccount(address))\n    this.logger.debug(`api.loadAccount ${address}`, omitHidden(accountInfo))\n    const balanceLine = accountInfo.balances.find((line) => line.asset_type === 'native')\n    const amountMain = new BigNumber(balanceLine && balanceLine.balance ? balanceLine.balance : '0')\n    // Subtract locked up min balance from result to avoid confusion about what is actually spendable\n    const confirmedBalance = amountMain.minus(MIN_BALANCE)\n    return {\n      confirmedBalance: confirmedBalance.toString(),\n      unconfirmedBalance: '0',\n      sweepable: this.isSweepableAddressBalance(amountMain),\n    }\n  }\n\n  async getNextSequenceNumber(payportOrIndex: ResolveablePayport): Promise<string> {\n    const payport = await this.resolvePayport(payportOrIndex)\n    const { address } = payport\n    const accountInfo = await this._retryDced(() => this.getApi().loadAccount(address))\n    return new BigNumber(accountInfo.sequence).plus(1).toString()\n  }\n\n  resolveIndexFromAddressAndMemo(address: string, memo?: string): number | null {\n    if (address === this.getHotSignatory().address) {\n      return 0\n    } else if (address === this.getDepositSignatory().address) {\n      if (memo) {\n        const index = Number.parseInt(memo)\n        if (!Number.isNaN(index)) {\n          return index\n        }\n      }\n      return 1\n    }\n    return null\n  }\n\n  async getLatestBlock(): Promise<Stellar.ServerApi.LedgerRecord> {\n    const page = await this._retryDced(() => this.getApi().ledgers()\n      .order('desc')\n      .limit(1)\n      .call())\n    if (!page.records) {\n      throw new Error('Failed to get stellar ledger records')\n    }\n    return page.records[0]\n  }\n\n  async getTransactionInfo(txId: string): Promise<StellarTransactionInfo> {\n    let tx: Stellar.ServerApi.TransactionRecord\n    try {\n      const txPage = await this._retryDced(() => this.getApi().transactions().transaction(txId).call())\n      if (txPage.records) {\n        tx = txPage.records[0]\n      } else if (isStellarTransaction(txPage)) {\n        tx = txPage\n      } else {\n        throw new Error(`Transaction not found ${txId}`)\n      }\n    } catch (e) {\n      const eString = e.toString()\n      if (NOT_FOUND_ERRORS.some(type => eString.includes(type))) {\n        throw new Error(`Transaction not found: ${eString}`)\n      }\n      throw e\n    }\n    this.logger.debug('getTransactionInfo', txId, omitHidden(tx))\n    const { amount, fee, fromAddress, toAddress } = await this._normalizeTxOperation(tx)\n    const fromIndex = this.resolveIndexFromAddressAndMemo(fromAddress, tx.memo)\n    const toIndex = this.resolveIndexFromAddressAndMemo(toAddress, tx.memo)\n    const confirmationNumber = tx.ledger_attr\n    const ledger = await this._retryDced(() => tx.ledger())\n    const currentLedger = await this.getLatestBlock()\n    const currentLedgerSequence = currentLedger.sequence\n    const confirmationId = ledger.hash\n    const confirmationTimestamp = ledger.closed_at ? new Date(ledger.closed_at) : null\n    const confirmations = currentLedgerSequence - confirmationNumber\n    const sequenceNumber = tx.source_account_sequence\n    const isExecuted = (tx as any).successful\n    const isConfirmed = Boolean(confirmationNumber)\n    const status = isConfirmed || isExecuted ? TransactionStatus.Confirmed : TransactionStatus.Pending\n    return {\n      status,\n      id: tx.id,\n      fromIndex,\n      fromAddress,\n      fromExtraId: null,\n      toIndex,\n      toAddress,\n      toExtraId: tx.memo || null,\n      amount: amount.toString(),\n      fee: fee.toString(),\n      sequenceNumber,\n      confirmationId,\n      confirmationNumber: String(confirmationNumber),\n      confirmationTimestamp,\n      isExecuted,\n      isConfirmed,\n      confirmations,\n      data: tx,\n    }\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption> {\n    let targetFeeLevel\n    let targetFeeRate\n    let targetFeeRateType\n    let feeMain: string\n    let feeBase: string\n    if (feeOption.feeLevel === FeeLevel.Custom) {\n      targetFeeLevel = feeOption.feeLevel\n      targetFeeRate = feeOption.feeRate\n      targetFeeRateType = feeOption.feeRateType\n      if (targetFeeRateType === FeeRateType.Base) {\n        feeBase = targetFeeRate\n        feeMain = this.toMainDenomination(feeBase)\n      } else if (targetFeeRateType === FeeRateType.Main) {\n        feeMain = targetFeeRate\n        feeBase = this.toBaseDenomination(feeMain)\n      } else {\n        throw new Error(`Unsupport stellar feeRateType ${feeOption.feeRateType}`)\n      }\n    } else {\n      targetFeeLevel = feeOption.feeLevel || FeeLevel.Medium\n      const feeStats = await this._retryDced(() => this.getApi().feeStats())\n      feeBase = feeStats.p10_accepted_fee\n      if (targetFeeLevel === FeeLevel.Medium) {\n        feeBase = feeStats.p50_accepted_fee\n      } else if (targetFeeLevel === FeeLevel.High) {\n        feeBase = feeStats.p95_accepted_fee\n      }\n      feeMain = this.toMainDenomination(feeBase)\n      targetFeeRate = feeMain\n      targetFeeRateType = FeeRateType.Main\n    }\n    return {\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      feeMain,\n      feeBase,\n    }\n  }\n\n  private async resolvePayportBalance(\n    fromPayport: Payport,\n    options: StellarCreateTransactionOptions,\n  ): Promise<BigNumber> {\n    if (isNil(fromPayport.extraId)) {\n      const balances = await this.getBalance(fromPayport)\n      return new BigNumber(balances.confirmedBalance)\n    }\n    if (typeof options.payportBalance !== 'string') {\n      throw new Error('stellar-payments createSweepTransaction missing required payportBalance option')\n    }\n    const payportBalance = new BigNumber(options.payportBalance)\n    if (payportBalance.isNaN()) {\n      throw new Error(`Invalid NaN payportBalance option provided: ${options.payportBalance}`)\n    }\n    return payportBalance\n  }\n\n  private getStellarNetwork() {\n    return this.networkType === NetworkType.Testnet\n      ? Stellar.Networks.TESTNET\n      : Stellar.Networks.PUBLIC\n  }\n\n  private serializeTransaction(tx: Stellar.Transaction): { serializedTx: string } {\n    const xdr = tx.toEnvelope().toXDR('base64')\n    return {\n      serializedTx: xdr.toString()\n    }\n  }\n\n  private deserializeTransaction(txData: object): Stellar.Transaction {\n    return new Stellar.Transaction((txData as any).serializedTx, this.getStellarNetwork())\n  }\n\n  private async doCreateTransaction(\n    fromTo: FromTo,\n    feeOption: ResolvedFeeOption,\n    amount: BigNumber,\n    payportBalance: BigNumber,\n    options: StellarCreateTransactionOptions,\n  ): Promise<StellarUnsignedTransaction> {\n    if (amount.isNaN() || amount.lte(0)) {\n      throw new Error(`Invalid amount provided to stellar-payments createTransaction: ${amount}`)\n    }\n    const { fromIndex, fromAddress, fromExtraId, fromPayport, toIndex, toAddress, toExtraId } = fromTo\n    if (fromAddress === toAddress) {\n      throw new Error('Cannot create XLM payment transaction sending XLM to self')\n    }\n    const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = feeOption\n    const seqNo = options.sequenceNumber\n    const sequenceNumber = toBigNumber(seqNo)\n    const txTimeoutSecs = options.timeoutSeconds || this.config.txTimeoutSeconds || DEFAULT_TX_TIMEOUT_SECONDS\n    const amountString = amount.toString()\n    const addressBalances = await this.getBalance({ address: fromAddress })\n    const addressBalance = new BigNumber(addressBalances.confirmedBalance)\n    const actualBalance = addressBalance.plus(MIN_BALANCE)\n    if (addressBalance.lt(0)) {\n      throw new Error(\n        `Cannot send from stellar address that has less than ${MIN_BALANCE} XLM: ${fromAddress} (${actualBalance} XLM)`,\n      )\n    }\n    const totalValue = amount.plus(feeMain)\n    if (addressBalance.minus(totalValue).lt(0)) {\n      throw new Error(\n        `Cannot send ${amountString} XLM with fee of ${feeMain} XLM because it would reduce the balance below ` +\n          `the minimum required balance of ${MIN_BALANCE} XLM: ${fromAddress} (${actualBalance} XLM)`,\n      )\n    }\n    if (typeof fromExtraId === 'string' && totalValue.gt(payportBalance)) {\n      throw new Error(\n        `Insufficient payport balance of ${payportBalance} XLM to send ${amountString} XLM ` +\n          `with fee of ${feeMain} XLM: ${serializePayport(fromPayport)}`,\n      )\n    }\n    // Stellar creates txs with account sequence + 1, so we must subtract sequenceNumber option first\n    const account = sequenceNumber\n      ? new Stellar.Account(fromAddress, sequenceNumber.minus(1).toString())\n      : await this.getApi().loadAccount(fromAddress)\n\n    const preparedTx = new Stellar.TransactionBuilder(account, {\n        fee: Number.parseInt(feeBase),\n        networkPassphrase: this.getStellarNetwork(),\n        memo: toExtraId ? Stellar.Memo.text(toExtraId) : undefined,\n      })\n      .addOperation(Stellar.Operation.payment({\n        destination: toAddress,\n        asset: Stellar.Asset.native(),\n        amount: amount.toString(),\n      }))\n      .setTimeout(txTimeoutSecs)\n      .build()\n    const txData = this.serializeTransaction(preparedTx)\n    return {\n      status: TransactionStatus.Unsigned,\n      id: null,\n      fromIndex,\n      fromAddress,\n      fromExtraId,\n      toIndex,\n      toAddress,\n      toExtraId,\n      amount: amountString,\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      fee: feeMain,\n      sequenceNumber: preparedTx.sequence,\n      data: txData,\n    }\n  }\n\n  async createTransaction(\n    from: number,\n    to: ResolveablePayport,\n    amount: string,\n    options: StellarCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<StellarUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    const amountBn = new BigNumber(amount)\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async createSweepTransaction(\n    from: number,\n    to: ResolveablePayport,\n    options: StellarCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<StellarUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    let amountBn = payportBalance.minus(feeOption.feeMain)\n    if (amountBn.lt(0)) {\n      const fromPayport = { address: fromTo.fromAddress, extraId: fromTo.fromExtraId }\n      throw new Error(\n        `Insufficient balance to sweep from stellar payport with fee of ${feeOption.feeMain} XLM: ` +\n          `${serializePayport(fromPayport)} (${payportBalance} XLM)`,\n      )\n    }\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async signTransaction(unsignedTx: StellarUnsignedTransaction): Promise<StellarSignedTransaction> {\n    assertType(StellarUnsignedTransaction, unsignedTx)\n    if (this.isReadOnly()) {\n      throw new Error('Cannot sign transaction with read only stellar payments (no xprv or secrets provided)')\n    }\n    this.logger.debug('signTransaction', unsignedTx.data)\n    const preparedTx = this.deserializeTransaction(unsignedTx.data)\n    let secret: string | Stellar.Keypair\n    const hotSignatory = this.getHotSignatory()\n    const depositSignatory = this.getDepositSignatory()\n    if (unsignedTx.fromAddress === hotSignatory.address) {\n      secret = hotSignatory.secret\n    } else if (unsignedTx.fromAddress === depositSignatory.address) {\n      secret = depositSignatory.secret\n    } else {\n      throw new Error(`Cannot sign stellar transaction from address ${unsignedTx.fromAddress}`)\n    }\n    const keypair = isString(secret) ? Stellar.Keypair.fromSecret(secret) : secret\n    preparedTx.sign(keypair)\n    const signedData = this.serializeTransaction(preparedTx)\n    return {\n      ...unsignedTx,\n      id: '',\n      data: signedData,\n      status: TransactionStatus.Signed,\n    }\n  }\n\n  async broadcastTransaction(signedTx: StellarSignedTransaction): Promise<StellarBroadcastResult> {\n    assertType(StellarSignedTransaction, signedTx)\n    const preparedTx = this.deserializeTransaction(signedTx.data)\n    let rebroadcast: boolean = false\n    try {\n      const existing = await this.getTransactionInfo(signedTx.id)\n      rebroadcast = existing.id === signedTx.id\n    } catch (e) {}\n    const result = await this._retryDced(() => this.getApi().submitTransaction(preparedTx))\n    this.logger.debug('broadcasted', omitHidden(result))\n    return {\n      id: result.hash,\n      rebroadcast,\n      data: result,\n    }\n  }\n}\n","import { StellarSignatory } from './types'\nimport StellarHDWallet from 'stellar-hd-wallet'\nimport * as bip39 from 'bip39'\n\nexport function deriveSignatory(seed: string, index: number): StellarSignatory {\n  const wallet = seed.includes(' ') ? StellarHDWallet.fromMnemonic(seed) : StellarHDWallet.fromSeed(seed)\n  const keypair = wallet.getKeypair(index)\n  const secret = keypair.secret()\n  const address = keypair.publicKey()\n  return {\n    address,\n    secret,\n  }\n}\n\nexport function generateMnemonic(): string {\n  return StellarHDWallet.generateMnemonic()\n}\n\nexport function mnemonicToSeed(mnemonic: string): string {\n  return bip39.mnemonicToSeedSync(mnemonic).toString('hex')\n}\n","import {\n  AccountStellarPaymentsConfig,\n  StellarSignatory,\n  StellarAccountConfig,\n  PartialStellarSignatory,\n} from './types'\nimport { BaseStellarPayments } from './BaseStellarPayments'\nimport { assertType } from '@faast/ts-common'\nimport { isValidAddress, isValidSecret } from './helpers'\nimport * as Stellar from 'stellar-sdk'\n\nexport class AccountStellarPayments extends BaseStellarPayments<AccountStellarPaymentsConfig> {\n  readOnly: boolean = false\n  readonly hotSignatory: StellarSignatory\n  readonly depositSignatory: StellarSignatory\n\n  constructor(config: AccountStellarPaymentsConfig) {\n    super(config)\n    assertType(AccountStellarPaymentsConfig, config)\n    this.hotSignatory = this.accountConfigToSignatory(config.hotAccount)\n    this.depositSignatory = this.accountConfigToSignatory(config.depositAccount)\n  }\n\n  accountConfigToSignatory(accountConfig: StellarAccountConfig): StellarSignatory {\n    if (PartialStellarSignatory.is(accountConfig)) {\n      if (!accountConfig.secret) {\n        if (!accountConfig.address) {\n          throw new Error('Invalid StellarSecretPair, either secret or address required')\n        }\n        this.readOnly = true\n        return {\n          address: accountConfig.address,\n          secret: '',\n        }\n      }\n      const keyPair = Stellar.Keypair.fromSecret(accountConfig.secret)\n      return {\n        address: keyPair.publicKey(),\n        secret: keyPair.secret(),\n      }\n    } else if (isValidAddress(accountConfig)) {\n      this.readOnly = true\n      return {\n        address: accountConfig,\n        secret: '',\n      }\n    } else if (isValidSecret(accountConfig)) {\n\n    }\n    throw new Error('Invalid stellar account config provided to stellar payments')\n  }\n\n  isReadOnly() {\n    return this.readOnly\n  }\n\n  getPublicAccountConfig(): AccountStellarPaymentsConfig {\n    return {\n      hotAccount: this.hotSignatory.address,\n      depositAccount: this.depositSignatory.address,\n    }\n  }\n\n  getAccountIds(): string[] {\n    return [this.hotSignatory.address, this.depositSignatory.address]\n  }\n\n  getAccountId(index: number): string {\n    if (index < 0) {\n      throw new Error(`Invalid stellar payments accountId index ${index}`)\n    }\n    if (index === 0) {\n      return this.hotSignatory.address\n    }\n    return this.depositSignatory.address\n  }\n\n  getHotSignatory() {\n    return this.hotSignatory\n  }\n\n  getDepositSignatory() {\n    return this.depositSignatory\n  }\n}\n","import { HdStellarPaymentsConfig, StellarSignatory } from './types'\nimport { BaseStellarPayments } from './BaseStellarPayments'\nimport { generateMnemonic, deriveSignatory } from './bip44'\nimport { AccountStellarPayments } from './AccountStellarPayments'\n\nexport class HdStellarPayments extends AccountStellarPayments {\n  readonly seed: string\n  readonly hotSignatory: StellarSignatory\n  readonly depositSignatory: StellarSignatory\n\n  constructor({ seed, ...config }: HdStellarPaymentsConfig) {\n    super({\n      ...config,\n      hotAccount: deriveSignatory(seed, 0),\n      depositAccount: deriveSignatory(seed, 1)\n    })\n  }\n\n  static generateMnemonic = generateMnemonic\n}\n","import {\n  BalanceActivityCallback,\n  GetBalanceActivityOptions,\n  BalanceActivity,\n  BalanceMonitor,\n  RetrieveBalanceActivitiesResult,\n} from '@faast/payments-common'\nimport * as Stellar from 'stellar-sdk'\n\nimport { padLeft, omitHidden } from './utils';\nimport { StellarRawTransaction, StellarCollectionPage } from './types';\nimport { assertValidAddress } from './helpers'\nimport { isUndefined, isNumber } from 'util'\nimport { StellarConnected } from './StellarConnected';\nimport { EventEmitter } from 'events'\nimport { Numeric } from '@faast/ts-common';\nimport BigNumber from 'bignumber.js';\n\nexport class StellarBalanceMonitor extends StellarConnected implements BalanceMonitor {\n\n  txEmitter = new EventEmitter()\n\n  _subscribeCancellors: Function[] = []\n\n  async destroy() {\n    this._subscribeCancellors.forEach((cancel) => cancel())\n  }\n\n  async subscribeAddresses(addresses: string[]) {\n    for (let address of addresses) {\n      assertValidAddress(address)\n    }\n    for (let address of addresses) {\n      try {\n        const cancel = this.getApi().transactions().cursor('now').forAccount(address).stream({\n          onmessage: (value) => {\n            this.txEmitter.emit('tx', { address, tx: value })\n          },\n          onerror: (e) => {\n            this.logger.error('Stellar tx stream error', e)\n          },\n        })\n        this.logger.log('Stellar address subscribed', address)\n        this._subscribeCancellors.push(cancel)\n      } catch (e) {\n        this.logger.error('Failed to subscribe to stellar address', address, e.toString())\n        throw e\n      }\n    }\n  }\n\n  onBalanceActivity(callbackFn: BalanceActivityCallback) {\n    this.txEmitter.on('tx', async ({ address, tx }) => {\n      const activity = await this.txToBalanceActivity(address, tx)\n      if (activity) {\n        callbackFn(activity)\n      }\n    })\n  }\n\n  async retrieveBalanceActivities(\n    address: string,\n    callbackFn: BalanceActivityCallback,\n    options: GetBalanceActivityOptions = {},\n  ): Promise<RetrieveBalanceActivitiesResult> {\n    assertValidAddress(address)\n    const { from: fromOption, to: toOption } = options\n    const from = new BigNumber(\n      isUndefined(fromOption) ? 0 : (Numeric.is(fromOption) ? fromOption : fromOption.confirmationNumber)\n    )\n    const to = new BigNumber(\n      isUndefined(toOption) ? 'Infinity' : (Numeric.is(toOption) ? toOption.toString() : toOption.confirmationNumber)\n    )\n\n    const limit = 10\n    let lastTx: StellarRawTransaction | undefined\n    let transactionPage: StellarCollectionPage<StellarRawTransaction> | undefined\n    let transactions: StellarRawTransaction[] | undefined\n    while (\n      isUndefined(transactionPage) ||\n      (transactionPage.records.length === limit\n        && lastTx\n        // This condition enables retrieving txs until we reach the desired range. No built in way to filter the query\n        && (from.lt(lastTx.ledger_attr) || to.lt(lastTx.ledger_attr)))\n    ) {\n      // I tried doing this with .stream, but it didn't let me order it in descending order\n      transactionPage = await this._retryDced(() => transactionPage\n        ? transactionPage.next()\n        : this.getApi()\n          .transactions()\n          .forAccount(address)\n          .limit(limit)\n          .order('desc') // important txs are retrieved newest to oldest for exit condition to work\n          .call()\n      )\n      const transactions = transactionPage.records\n      this.logger.debug(`retrieved stellar txs for ${address}`, omitHidden(transactions))\n      for (let tx of transactions) {\n        if ((lastTx && tx.id === lastTx.id) || !(from.lt(tx.ledger_attr) && to.gt(tx.ledger_attr))) {\n          continue\n        }\n        const activity = await this.txToBalanceActivity(address, tx)\n        if (activity) {\n          await callbackFn(activity)\n        }\n      }\n      lastTx = transactions[transactions.length - 1]\n    }\n    return { from: from.toString(), to: to.toString() }\n  }\n\n  async txToBalanceActivity(address: string, tx: StellarRawTransaction): Promise<BalanceActivity | null> {\n    const successful = (tx as any).successful\n    if (!successful) {\n      this.logger.log(`No balance activity for stellar tx ${tx.id} because successful is ${successful}`)\n      return null\n    }\n    const confirmationNumber = tx.ledger_attr\n    const primarySequence = padLeft(String(tx.ledger_attr), 12, '0')\n    const secondarySequence = padLeft(String(new Date(tx.created_at).getTime()), 18, '0')\n    const ledger = await this.getBlock(confirmationNumber)\n    let operation\n    try {\n      operation = await this._normalizeTxOperation(tx)\n    } catch (e) {\n      if (e.message.includes('Cannot normalize stellar tx')) {\n        return null\n      }\n      throw e\n    }\n    const { amount, fee, fromAddress, toAddress } = operation\n    if (!(fromAddress === address || toAddress === address)) {\n      this.logger.log(`Stellar transaction ${tx.id} operation does not apply to ${address}`)\n      return null\n    }\n    const type = toAddress === address ? 'in' : 'out'\n    const extraId = toAddress === address ? tx.memo : null\n    const tertiarySequence = type === 'out' ? '00' : '01'\n    const activitySequence = `${primarySequence}.${secondarySequence}.${tertiarySequence}`\n\n    const netAmount = type === 'out' ? amount.plus(fee).times(-1) : amount\n\n    return {\n      type,\n      networkType: this.networkType,\n      networkSymbol: 'XLM',\n      assetSymbol: 'XLM',\n      address: address,\n      extraId: !isUndefined(extraId) ? extraId : null,\n\n      amount: netAmount.toString(),\n\n      externalId: tx.id,\n      activitySequence,\n      confirmationId: ledger.hash,\n      confirmationNumber: String(confirmationNumber),\n      timestamp: new Date(ledger.closed_at),\n    }\n  }\n}\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { StellarPaymentsConfig, HdStellarPaymentsConfig, AccountStellarPaymentsConfig } from './types'\nimport { HdStellarPayments } from './HdStellarPayments'\nimport { AccountStellarPayments } from './AccountStellarPayments'\nimport { assertType } from '@faast/ts-common'\n\nexport class StellarPaymentsFactory implements PaymentsFactory<StellarPaymentsConfig> {\n  forConfig(config: HdStellarPaymentsConfig): HdStellarPayments\n  forConfig(config: AccountStellarPaymentsConfig): AccountStellarPayments\n  forConfig(config: StellarPaymentsConfig) {\n    if (AccountStellarPaymentsConfig.is(config)) {\n      return new AccountStellarPayments(config)\n    }\n    return new HdStellarPayments(assertType(HdStellarPaymentsConfig, config))\n  }\n}\n\nexport default StellarPaymentsFactory\n"],"names":["extendCodec","BaseConfig","t.union","t.string","instanceofCodec","Stellar.Server","t.nullType","t.number","t.type","t.partial","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","nullable","BaseBroadcastResult","t.boolean","t.object","CreateTransactionOptions","NetworkType","createUnitConverters","isString","Stellar.StrKey","isNil","omitBy","isObject","assertType","DelegateLogger","Payport","omit","TransactionStatus","FeeLevel","FeeRateType","Stellar.Networks","Stellar.Transaction","toBigNumber","Stellar.Account","Stellar.TransactionBuilder","Stellar.Memo","Stellar.Operation","Stellar.Asset","Stellar.Keypair","EventEmitter","isUndefined","Numeric"],"mappings":"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"}